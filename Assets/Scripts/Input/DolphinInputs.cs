//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/DolphinInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DolphinInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DolphinInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DolphinInputs"",
    ""maps"": [
        {
            ""name"": ""DolphinMovement"",
            ""id"": ""68fa9cd2-46d6-43b5-b755-250d1c6ea29e"",
            ""actions"": [
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Value"",
                    ""id"": ""7b2f0164-2725-48ef-8374-c65b4bbc211d"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reverse"",
                    ""type"": ""Value"",
                    ""id"": ""79bb4774-c6ad-409b-9e49-1eb2d1a663fe"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SteerLeftRight"",
                    ""type"": ""Button"",
                    ""id"": ""ece83a88-820e-4b0b-96e6-b60030257c53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SteerUpDown"",
                    ""type"": ""Button"",
                    ""id"": ""c52207cc-d37a-4548-b0b9-a3e02cc1529e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""2363428c-c958-4e2d-abc8-cdb469367be3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Value"",
                    ""id"": ""6ae64e24-8fbf-4b2b-8764-98b1a955fd97"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""560397d5-cf19-48b9-86a3-1dd56cd833c7"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6ceb734-de68-4fab-9fd1-ce2079e85f56"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Reverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""ControllerLs"",
                    ""id"": ""414c9709-0b3c-4c01-bf34-4d3b92dab3ed"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteerLeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8d65574a-a53b-4c86-8986-b038acc6d30a"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""SteerLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e10ef20c-68ec-4df8-9470-1f983cb4eae0"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""SteerLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ControllerLs"",
                    ""id"": ""dc961922-6c44-4f46-b224-3f47da7081e4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteerUpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7410e537-4151-497e-8928-6fd3f57ddf76"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""SteerUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e1e8c178-8831-4769-9b6a-9dd3df12ef03"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""SteerUpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""98934c58-39e7-4773-a22d-dcb4a799cbea"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""ControllerRs"",
                    ""id"": ""a8e5b718-b364-467e-87f1-f7a40b5873e6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""07389590-fa55-4c29-b4c4-158aeaed84f3"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""92d04757-aa72-4493-80be-d6309aa9a246"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e1f87668-3112-48f7-aef5-aed6cbf20a1c"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fc246e1c-36bf-43a8-add1-e70fcf21b6ae"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>/{Back}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // DolphinMovement
        m_DolphinMovement = asset.FindActionMap("DolphinMovement", throwIfNotFound: true);
        m_DolphinMovement_Accelerate = m_DolphinMovement.FindAction("Accelerate", throwIfNotFound: true);
        m_DolphinMovement_Reverse = m_DolphinMovement.FindAction("Reverse", throwIfNotFound: true);
        m_DolphinMovement_SteerLeftRight = m_DolphinMovement.FindAction("SteerLeftRight", throwIfNotFound: true);
        m_DolphinMovement_SteerUpDown = m_DolphinMovement.FindAction("SteerUpDown", throwIfNotFound: true);
        m_DolphinMovement_Dash = m_DolphinMovement.FindAction("Dash", throwIfNotFound: true);
        m_DolphinMovement_Camera = m_DolphinMovement.FindAction("Camera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DolphinMovement
    private readonly InputActionMap m_DolphinMovement;
    private List<IDolphinMovementActions> m_DolphinMovementActionsCallbackInterfaces = new List<IDolphinMovementActions>();
    private readonly InputAction m_DolphinMovement_Accelerate;
    private readonly InputAction m_DolphinMovement_Reverse;
    private readonly InputAction m_DolphinMovement_SteerLeftRight;
    private readonly InputAction m_DolphinMovement_SteerUpDown;
    private readonly InputAction m_DolphinMovement_Dash;
    private readonly InputAction m_DolphinMovement_Camera;
    public struct DolphinMovementActions
    {
        private @DolphinInputs m_Wrapper;
        public DolphinMovementActions(@DolphinInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accelerate => m_Wrapper.m_DolphinMovement_Accelerate;
        public InputAction @Reverse => m_Wrapper.m_DolphinMovement_Reverse;
        public InputAction @SteerLeftRight => m_Wrapper.m_DolphinMovement_SteerLeftRight;
        public InputAction @SteerUpDown => m_Wrapper.m_DolphinMovement_SteerUpDown;
        public InputAction @Dash => m_Wrapper.m_DolphinMovement_Dash;
        public InputAction @Camera => m_Wrapper.m_DolphinMovement_Camera;
        public InputActionMap Get() { return m_Wrapper.m_DolphinMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DolphinMovementActions set) { return set.Get(); }
        public void AddCallbacks(IDolphinMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_DolphinMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DolphinMovementActionsCallbackInterfaces.Add(instance);
            @Accelerate.started += instance.OnAccelerate;
            @Accelerate.performed += instance.OnAccelerate;
            @Accelerate.canceled += instance.OnAccelerate;
            @Reverse.started += instance.OnReverse;
            @Reverse.performed += instance.OnReverse;
            @Reverse.canceled += instance.OnReverse;
            @SteerLeftRight.started += instance.OnSteerLeftRight;
            @SteerLeftRight.performed += instance.OnSteerLeftRight;
            @SteerLeftRight.canceled += instance.OnSteerLeftRight;
            @SteerUpDown.started += instance.OnSteerUpDown;
            @SteerUpDown.performed += instance.OnSteerUpDown;
            @SteerUpDown.canceled += instance.OnSteerUpDown;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
        }

        private void UnregisterCallbacks(IDolphinMovementActions instance)
        {
            @Accelerate.started -= instance.OnAccelerate;
            @Accelerate.performed -= instance.OnAccelerate;
            @Accelerate.canceled -= instance.OnAccelerate;
            @Reverse.started -= instance.OnReverse;
            @Reverse.performed -= instance.OnReverse;
            @Reverse.canceled -= instance.OnReverse;
            @SteerLeftRight.started -= instance.OnSteerLeftRight;
            @SteerLeftRight.performed -= instance.OnSteerLeftRight;
            @SteerLeftRight.canceled -= instance.OnSteerLeftRight;
            @SteerUpDown.started -= instance.OnSteerUpDown;
            @SteerUpDown.performed -= instance.OnSteerUpDown;
            @SteerUpDown.canceled -= instance.OnSteerUpDown;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
        }

        public void RemoveCallbacks(IDolphinMovementActions instance)
        {
            if (m_Wrapper.m_DolphinMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDolphinMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_DolphinMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DolphinMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DolphinMovementActions @DolphinMovement => new DolphinMovementActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IDolphinMovementActions
    {
        void OnAccelerate(InputAction.CallbackContext context);
        void OnReverse(InputAction.CallbackContext context);
        void OnSteerLeftRight(InputAction.CallbackContext context);
        void OnSteerUpDown(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
    }
}
